CSS:
    CircuitDt
        background-image: radial-gradient(rgba(41, 41, 41, 0.6), rgba(33, 33, 34, 0.70)), url("../../assets/maping.webp");
    Home:
    Changer tous les chemins des background-image en ajoutant 2 "sorties" :   exemple: background-image: url('../../assets/paris1.jpg');

    dans tous les css des groupes (gp....) : changer l'import du fichier de reset css (appelé base.css) : @import '../global-styles/base.css';

JS/JSX: pages et composants
Changer les chemin de tous les imports des fichiers css (et ranger les mêmes types d'import ensemble).
Idée : on aurait pu s'en passer via un fichier css avec des imports de tous les fichiers et on appel que celui-là dans App.js mais possible pbm / bugs

Faire le tri : y a t-il des pages qui sont en fait des composants ? 

Résoudre :
- {/* <p>{CircuitObject.magasins.map(magasin => magasin.recordId_magasin)}</p> */}
- Affichage de la carte
- Responsive 
- PWA 
- Souscription circuit en groupe (+1 susbcriber) - si 10/10 subscriber = on retire le circuit des groupes
- Charger la base de donnée avec les susbcribers

CSS:
- js : onload il faut coller le contenu en haut du défilement.(comme ça si on change de format mobile...)
- barre de défilement horizontal désactiver (overflow-x)



@media screen and (min-width: 576px) {

    /* Changing cicles in carrousel */
   
}



import React from 'react';
import { latLngBounds, DivIcon } from 'leaflet';
import {
    MapContainer,
    TileLayer,
    Marker,
    Popup,
    FeatureGroup,
    useMap,
} from 'react-leaflet';

const Map = ({ waypoints }) => {
    // -- INIT
    // Base coords
    const baseCoords = [12.34567, 76.54321];

    // -- RENDER
    return (
        <MapContainer
            center={baseCoords}
            zoom={10}
            scrollWheelZoom
        >
            <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />

            <MapContent waypoints={waypoints} />
        </MapContainer>
    );
};

// Subcomponent mandatory for useMap()
const MapContent = ({ waypoints }) => {
    // Map context
    const map = useMap();

    // ... Code pour générer les waypoints

    // -- RENDER
    return (
        <FeatureGroup>
            {waypoints.map((wp, idx) => {
                // ... du code
                // Marker Icon
                const myIcon = new DivIcon({
                    // ... options
                });

                // Add marker
                return (
                    <Marker
                        key={wp.id}
                        position={[wp.coordinates.latitude, wp.coordinates.longitude]}
                        icon={myIcon}
                    >
                        {/* ... Code du marqueur */}
                    </Marker>
                );
            })}
        </FeatureGroup>
    );
};

export default Map;






import React, { useEffect, useState } from "react";
import axios from "axios";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";

import "../styles/circuits-and-map/Map.css";

function Map() {
  const [shopData, setShopData] = useState([]);
  
  
  // appel de l'API grace à axios (à installer avec npm)
  useEffect(() => {
    axios
      .get(
        "https://opendata.paris.fr/api/records/1.0/search/?dataset=coronavirus-commercants-parisiens-livraison-a-domicile&q=&rows=100&facet=code_postal&facet=type_de_commerce&facet=fabrique_a_paris&facet=services"
      )
      .then((res) => setShopData(res.data.records));
  }, []);

  return (
    <div className="wrapper">
     
      <MapContainer className="leaflet-container"
        center={[48.866669, 2.33333]}
        zoom={33}
        scrollWheelZoom={true}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        <Marker position={[48.866669, 2.33333]}>
          <Popup>
            <h1>hello</h1>
          </Popup>
        </Marker>
      </MapContainer>
    </div>

  )
}

export default Map;


allcircuit.js before last version:

import React from 'react';
import { useState, useEffect } from 'react';
import axios from "axios";
import { Link } from "react-router-dom";

import '../styles/circuits-and-map/allCircuits.css';

const Intro = () => {
  const [listOfCircuits, setListOfCircuits] = useState([]);
  const [listOfRecommandations, setListOfRecommandations] = useState([]);



  useEffect(() => {
    axios.get("http://localhost:3000/circuit/allCircuit").then((response) => {
      setListOfCircuits(response.data.circuits)

    });
  }, []);
  // afficher 4 circuits aprés le 1er comme ça on ne va pas afficher toutes les circuits de notre bdd dans recommadation
  useEffect(() => {
    axios.get("http://localhost:3000/circuit/all/4/2").then((response) => {
      setListOfRecommandations(response.data.circuits)

    });
  }, []);

  return (
    <div className="wrapper containeAllCircuit">
      <div className="BtnA">
              <button className="backBtn" type="submit"><span class="material-icons">arrow_back</span></button>
            <Link className='nameCircuit' to="/CreateCircuits"><button className="createBtn" type="submit" ><span class="material-icons">add_task</span></button></Link>
              </div>
      <h2 id="BigTitle" >Selon vos préferences</h2>

      <div id="sectionCard">
        {listOfCircuits.map((value) => {
          
          return (
            <div className="cardCircuit">
              <img className="picture" src={value.image_circuit} />

              <Link className='nameCircuit' to={`/CircuitDT/${value.id_circuit}`}>{value.name_circuit}</Link>


            </div>


          );
        })}
      </div>

      <h2 id="BigTitle" >Nos Recommandations</h2>
      <div id="sectionCard">
        {listOfRecommandations.map((value) => {
          /* const magasin = value.magasins.map(magasin => magasin.recordId_magasin) */
          return (
            <div className="cardCircuit">

              <img className="picture" src={value.image_circuit} ></img>

              <Link className='nameCircuit' to={`/CircuitDT/${value.id_circuit}`}>{value.name_circuit}</Link>

            </div>


          );
        })}
      </div>



    </div>
  );
};

export default Intro


CIRCUITDT:

import React, { useEffect, useState } from "react";
import {Link, useParams} from "react-router-dom";
import axios from "axios";

import '../styles/circuits-and-map/CircuitDT.css';

function CircuitDT(){
    let { id_circuit } = useParams()
    const [CircuitObject, setCircuitObject] = useState({});
    useEffect(() => {
        axios.get(`http://localhost:3000/circuit/getCircuitById/${id_circuit}`).then((response) =>{
            setCircuitObject(response.data.circuits);
           
        });
    },);

    return (
        <div className="wrapper containCircuitDT">
           <div className="BtnA">
             
            <Link className='arrowBtn' to="/AllCircuits"><span class="material-icons">arrow_back</span></Link>
              </div>
            <div className="contenthead">
                <div className="header">
                    <h3>Durée</h3>
                    <p>4H</p>
                </div>
                <div className="header">
                    <h3>{CircuitObject.arrondissement}</h3>
                    <p>5</p>
                </div>
                </div>
                <div className="cardDT">
                    <img className="pict" src={CircuitObject.image_circuit} alt="" />
                    <div className="contentTXT">
                        <h1>{CircuitObject.name_circuit}</h1>
                        <div>{CircuitObject.description_circuit}</div>
                        <p>{CircuitObject.magasins?.map(magasin => <p>{magasin.recordId_magasin}</p> )}</p>
                    </div>
                </div>
               
            
        </div>
    );
}

export default CircuitDT;



.containCircuitDT{
   
    background-image: radial-gradient(rgba(41, 41, 41, 0.6), rgba(33, 33, 34, 0.70)), url("../../assets/maping.webp");
    background-repeat: no-repeat;
    background-size: cover;
    background-attachment: fixed;
    height: 100vh;
}
.contenthead{
    display: grid;
    grid-template-columns: 1fr 1fr;
    justify-items: center;
    padding-top: 96px;
    margin-bottom: 10px;
}
.arrowBtn{
    border-radius: 7px;
    border: none;
    -webkit-backdrop-filter: blur(15px);
    backdrop-filter: blur(15px);
    background: #0054a3;
    box-shadow: 0 5px 8px 0 rgb(27 26 26), inset 0 -3px 9px 0 #0c3963;
    height: 2.3em;
    width: 2em;
    font-size: 1em;
    font-weight: 900;
    display: grid;
    justify-items: center;
    align-items: center;
    color: #ffffff;
}
.header h3{
    color: darkgoldenrod;
    font-size: 1em;
    font-weight: 900;
}
.header p{
    color: #fff;
    font-size: 1.5em;
    font-weight: 700;
}
.pict{
    grid-row:2;
    height: auto;
    width: 100%;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    
}
.contentTXT{
    grid-row:1;
    background: white;
    width: 100vw;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    padding: 15px 15px 15px 15px;
    overflow-x: hidden;
    overflow-y: scroll;
}
.contentTXT h1{
    color: black;
    font-size: .90em;
    font-weight: 900;
}
.contentTXT div{
    width:90%;
    height: auto;
    display:block;
    overflow-x:hidden;
    color: rgb(20, 20, 20);
    font-size: .70em;
    font-weight: 100;
    word-break: break-all;
}
.cardDT{
    margin: 0 auto;
    width:90%;
    height: 100%;
    overflow-y: scroll;
    overflow-x:hidden;
    display: grid;
    grid-template-rows: auto auto;
    align-items: start;
    justify-items: center;
    background: white;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;

}



ALLCIRCUIT CSS

/* #BigTitle{
    background: #0054A3;
box-shadow: 3px 3px 16px rgba(0, 84, 163, 0.38), inset -10px -10px 20px #0C3963;
border-radius: 10px;
    color:white;
    border-radius: 5px;
    font-size: 18px;
    width: 220px;
    height: 45px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.containeAllCircuit{
    display: flex;
    flex-direction: column;
    row-gap: 30px;
    background: white;
    padding: 15px 15px 0 15px;
}
.cardCircuit{
    display: flex;
    flex-direction: column;
  
}
.nameCircuit{
color: black;
font-size: 1em;
font-weight: 700;
}
.descriptCircuit{
    color: rgb(33, 33, 33);
    font-size: .90em;
    font-weight: 100;
}
.BtnA {
    display: flex;
    flex-direction: row;
    
    padding-bottom: 16px;
    column-gap: 18em;
    
}
a{
    text-decoration: none;
    color: black;
}

.picture{
    height: 180px;
    width: 140px;
    border-radius: 14px;
}

#sectionCard{
    display: flex;
    width:100%;
    overflow: auto;
    column-gap: 20px;
}

h3{
    font-size: 15px;
}

p{
    font-size: 13px;
} */





import React, {useState, useEffect} from 'react';
import { useParams, Link } from 'react-router-dom';
import { MdOutlineArrowForwardIos } from "react-icons/md";
import MyImage from "../assets/CircuitExampleImage.jpg";
import GpShopsSlider from "./Gp_circuits_shops";
import SwitchButton from "./Gp_switch_button";
import axios from "axios";

import '../styles/circuits_groups/gp_description.css';

export const GpCircuitDescription = () => {

    // Information permettant de savoir vers quelle page de description du circuit aller:
    const { id_circuit } = useParams();
    const [data, setData] = useState({});
    useEffect(() => {
        axios.get(`http://localhost:3000/circuit/getCircuitById/${id_circuit}`).then((response) =>{
            setData(response.data.circuits);
           
        });
    },);
    /**
     * Fonction qui sert à rabaisser ou remonter le panneau de description du circuit:
     * Cela engendre une modification de nombreux composants de la page.
     */
    
    const toggleDescriptionCard = () => {
        const MainContainer = document.querySelector(".gp-description-main");

        const descriptionContainer = document.querySelector(".gp-description-card");
        const descriptionImage = document.querySelector(".gp-description-image");
        const descriptionText = document.querySelector(".gp-description-text");
        const subscribeCircuit = document.querySelector(".gp-subscription-btn");
        const DisplayHideArrow = document.querySelector(".arrow-hide-display");
        const CircuitImage = document.querySelector(".gp-circuit-map");
        const CircuitSteps = document.querySelector(".gp-circuit-steps");
        const switchButtons = document.querySelector(".switch-buttons-section");

        if (window.getComputedStyle(descriptionText).getPropertyValue("display") === "none") {
            switchButtons.style.opacity = "0";
            descriptionImage.style.display = "block";
            descriptionText.style.display = "block";
            subscribeCircuit.style.display = "block";
            DisplayHideArrow.style.transform = "rotate(90deg)";
            descriptionContainer.style.height = '60%';
            descriptionImage.style.transition = "1s ease-in-out";
            descriptionImage.style.transform = "translateY(0%)";
            CircuitImage.style.opacity = "0.1";
            CircuitImage.style.transition = "0.5s ease";
            CircuitSteps.style.opacity = "0";
            MainContainer.style.height = '100vh';
            MainContainer.style.width = '100%';
            
        } else {
            switchButtons.style.opacity = "1";
            CircuitImage.style.opacity = "1";
            CircuitImage.style.transition = "0.5s ease";
            descriptionImage.style.transition = "0s";
            descriptionContainer.style.transition = "1s ease";
            descriptionImage.style.transform = "translateY(100%)";
            descriptionText.style.display = "none";
            subscribeCircuit.style.display = "none";
            DisplayHideArrow.style.transform = "rotate(-90deg)";
            descriptionContainer.style.height = '10%';
            MainContainer.style.height = '0vh';
            MainContainer.style.width = '0%';
        }
    }
        console.log(data)
    return (
        <>
            <div className="gp-circuit-steps"><GpShopsSlider/></div>
            <div className="gp-circuit-map" style={{ backgroundImage: `url(${MyImage})` }}></div>
          
            {/* Ici on ne filtre que les informations issu du bon circuit 
            c'est à dire équivalent à la valeur de la propriété "route" de l'objet qui liste les commerces d'un circuit et de l'url/:route */}
            {data.circuits?.map((card, index) => {
                return(
            
                <main key={index} className='gp-description-main' >

                    {/* Composant permettant d'afficher soit la liste des commerces du circuit soit une carte du circuit en fond de page */}
                    <SwitchButton />
                   
                    <div className="gp-card-container">
                        <div className="gp-description-card">
                            <span onClick={toggleDescriptionCard}><MdOutlineArrowForwardIos className="arrow-hide-display" /></span>
                            <div className='gp-description-text active'>
                                <h1>{card.title}</h1>
                                <p>{card.description}</p>
                                <ul>
                                    <li><span>Date:</span> {card.created_at}</li>
                                    <li><span>Horaires:</span> {card.created_at}</li>
                                </ul>
                            </div>

                            {/* Lien pour s'inscrire au circuit qui va renvoyer à la page d'inscription de Salma (ici ça renvoit à un module temporaire)*/}
                            <Link className="gp-subscription-btn" to={card.name_circuit}>Je m'inscris</Link>
                            
                        </div>
                        <div className='gp-description-image' style={{ backgroundImage: `url(${card.image_circuit})` }}></div>
                    </div>
                </main>
                )
})}

        </>
    )

}

export default GpCircuitDescription;














import React, {useState, useEffect} from 'react';
import { useParams, Link } from 'react-router-dom';
import { MdOutlineArrowForwardIos } from "react-icons/md";
import MyImage from "../assets/CircuitExampleImage.jpg";
import GpShopsSlider from "./Gp_circuits_shops";
import SwitchButton from "./Gp_switch_button";
import axios from "axios";

import '../styles/circuits_groups/gp_description.css';

export const GpCircuitDescription = () => {

    // Information permettant de savoir vers quelle page de description du circuit aller:
    const { id_circuit } = useParams();
    
    const [data, setData] = useState({});

    useEffect(() => {
        axios.get(`http://localhost:3000/circuit/getCircuitById/${id_circuit}`).then((response) =>{
            setData(response.data.circuits);
           
        });
    },);
    /**
     * Fonction qui sert à rabaisser ou remonter le panneau de description du circuit:
     * Cela engendre une modification de nombreux composants de la page.
     */
    
    const toggleDescriptionCard = () => {
        const MainContainer = document.querySelector(".gp-description-main");

        const descriptionContainer = document.querySelector(".gp-description-card");
        const descriptionImage = document.querySelector(".gp-description-image");
        const descriptionText = document.querySelector(".gp-description-text");
        const subscribeCircuit = document.querySelector(".gp-subscription-btn");
        const DisplayHideArrow = document.querySelector(".arrow-hide-display");
        const CircuitImage = document.querySelector(".gp-circuit-map");
        const CircuitSteps = document.querySelector(".gp-circuit-steps");
        const switchButtons = document.querySelector(".switch-buttons-section");

        if (window.getComputedStyle(descriptionText).getPropertyValue("display") === "none") {
            switchButtons.style.opacity = "0";
            descriptionImage.style.display = "block";
            descriptionText.style.display = "block";
            subscribeCircuit.style.display = "block";
            DisplayHideArrow.style.transform = "rotate(90deg)";
            descriptionContainer.style.height = '60%';
            descriptionImage.style.transition = "1s ease-in-out";
            descriptionImage.style.transform = "translateY(0%)";
            CircuitImage.style.opacity = "0.1";
            CircuitImage.style.transition = "0.5s ease";
            CircuitSteps.style.opacity = "0";
            MainContainer.style.height = '100vh';
            MainContainer.style.width = '100%';
            
        } else {
            switchButtons.style.opacity = "1";
            CircuitImage.style.opacity = "1";
            CircuitImage.style.transition = "0.5s ease";
            descriptionImage.style.transition = "0s";
            descriptionContainer.style.transition = "1s ease";
            descriptionImage.style.transform = "translateY(100%)";
            descriptionText.style.display = "none";
            subscribeCircuit.style.display = "none";
            DisplayHideArrow.style.transform = "rotate(-90deg)";
            descriptionContainer.style.height = '10%';
            MainContainer.style.height = '0vh';
            MainContainer.style.width = '0%';
        }
    }
        console.log(data)
    return (
        <>
            <div className="gp-circuit-steps"><GpShopsSlider/></div>
            <div className="gp-circuit-map" style={{ backgroundImage: `url(${MyImage})` }}></div>
          
            {/* Ici on ne filtre que les informations issu du bon circuit 
            c'est à dire équivalent à la valeur de la propriété "route" de l'objet qui liste les commerces d'un circuit et de l'url/:route */}
            {data.circuits?.map((card, index) => {
                return(
            
                <main key={index} className='gp-description-main' >

                    {/* Composant permettant d'afficher soit la liste des commerces du circuit soit une carte du circuit en fond de page */}
                    <SwitchButton />
                   
                    <div className="gp-card-container">
                        <div className="gp-description-card">
                            <span onClick={toggleDescriptionCard}><MdOutlineArrowForwardIos className="arrow-hide-display" /></span>
                            <div className='gp-description-text active'>
                                <h1>{card.title}</h1>
                                <p>{card.description}</p>
                                <ul>
                                    <li><span>Date:</span> {card.created_at}</li>
                                    <li><span>Horaires:</span> {card.created_at}</li>
                                </ul>
                            </div>

                            {/* Lien pour s'inscrire au circuit qui va renvoyer à la page d'inscription de Salma (ici ça renvoit à un module temporaire)*/}
                            <Link className="gp-subscription-btn" to={card.name_circuit}>Je m'inscris</Link>
                            
                        </div>
                        <div className='gp-description-image' style={{ backgroundImage: `url(${card.image_circuit})` }}></div>
                    </div>
                </main>
                )
})}

        </>
    )

}

export default GpCircuitDescription;



<p align="center">
  <img width="30%" src="frontEnd/public/pics/logoParici.png" />
</p>

## <p align="center"> Découvrez les petites commercants de Paris avec Parici </p>

"Parici" est un proof of concept (POC) créé dans le cadre du projet final de Hetic ayant pour but de vous faire découvrir le Paris des petits commerces.<br/> 

En effet, l'activité des petits commerçants sur Paris est vivante mais nombre d'entre-nous n'avons pas idée de cette richesse tant nous sommes pris dans nos habitudes. Nous connaissons les commerces de notre quartier ou allons dans les grands magasins. 

Ce POC vise à faire découvrir cette richesse du petit commerce en proposant des circuits sur Paris que l'on peux faire sur une journée ou une aprés-midi. Au lieu de devoir aller soit-même rechercher les commerces et les circuits, Parici vous facilite la tâche : vous concevez votre circuit avec aisance grâce à des propositions automatisées ou alors vous découvrez un circuit déjà créé par d'autres.  

### But du projet

Le premier but est de valoriser le petit commerce en proposant cette idée d'application. 

Le but est aussi pédagogique: apprendre à utiliser des technologies comme Node.js et React.js.

### Installation 

Pour réaliser l'installation vous avez besoin : 
- Installer Node.js en suivant les étapes sur <a href="https://nodejs.org/fr/" >ce site</a>
- Installer aussi NPM.
- Vous pouvez utiliser des outils comme MAMP afin d'être connecté à une base MySQL ou autre moyen (PHP n'est pas requis).

#### Une fois que vous êtes connecté à MySQL:<br/>
- Créez une base de donnée vide nommée paricidb (tout en minuscule).
- Puis ouvrez votre IDE et allez dans le dossier backEnd sur votre terminal. 
- Ouvrez un second terminal et aller dans frontEnd.
- Dans backEnd vous devez vérifiez certains points: 
    + Dans le fichier database/db.js :<br/>
      Dans la variable dbinfo: vérifiez que le mot de passe correspond au vôtre  (ici c'est "root" mais certains système ont rien ou un autre mot de passe)<br/>
      En bas de ce fichier, trouvez la ligne de code commentée <code>dbinfo.sync({ force: true });</code>: décommentez-là. 
    + Dans le fichier serveur.js, vous verrez que le port utilisé par le back est 3000: déconnectez vos autres activités de ce port qui doit être libre.
 - Lancer ensuite dans le dossier backEnd : npm install
 - Normalement, le dossier package.json que ce soit celui du back ou du front n'est plus dans gitignore donc les modules supplémentaires doivent s'installer.
 
#### Une fois le backEnd bien démarrer ("connexion à mon db" s'affiche), vous lancez le front avec React :<br/>

  Tapez `npm install` pour installer les node-modules nécessaires à React.
 
 - Le fichier package.json a normalement été préservé dans le repo mais si ce n'est pas le cas, voici les modules supplémentaires à installer (npm install + nom) :<br/>
   Pour le back end : express, nodemon, sequelize
   Pour le front-end: sass, react-icons, react-router, react-leaflet (voir la documentation en ligne) sur l'installation. 
  
  Ensuite, pour démarrez les environnement de développement: `npm start` 
  
- Vous démarrez ainsi les environnements de développement dans cet ordre (ou alors assurez-vous de libérer le port 3000 pour le back): 
  + En premier sur backEnd : npm start (pour avoir le port 3000)
  + En second sur frontEnd (il demandera de changer de port : tapez "Y"): npm start 
  
#### Rappel des commandes principales:<br/> 
 0. `NPM` ou `Yarn` sont requis

 Si vous optez pour npm:<br/>
 1. Installer les modules `NPM`:
 
    ```sh
    npm i ou npm install
    ```
    
 2. Pour démarrer l'environnement de développement:
    ```sh
    npm start
    ```


### Equipe: 

- [Farmata SIDIBE](https://github.com/Farmata-sidibe)
- [Salma Wadouachi](https://github.com/TerraNovaX)
- [Amaury FRANSSEN](https://github.com/ExploryKod) 
- [Nachmia MOHAMED](https://github.com/Nachmia)
- [Raphaël Louison](https://github.com/Nakashaki)
- [Mathias Bouillon](https://github.com/MathiasBln)
- [Julien Vérité](https://github.com/JulienVJ)
- [Idris Abelli](https://github.com/Sinitus)
- [Morgane Dassonville](https://github.com/Jun080)
- Martin Claver 


### Technologies : 
   ![HTML5](https://img.shields.io/badge/html5-%23E34F26.svg?style=for-the-badge&logo=html5&logoColor=white)
   ![CSS3](https://img.shields.io/badge/css3-%231572B6.svg?style=for-the-badge&logo=css3&logoColor=white)
   ![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)
   ![MySQL](https://img.shields.io/badge/mysql-%2300f.svg?style=for-the-badge&logo=mysql&logoColor=white)
   ![React](https://img.shields.io/badge/react-%2320232a.svg?style=for-the-badge&logo=react&logoColor=%2361DAFB)
   ![NodeJS](https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&logo=node.js&logoColor=white)
   ![NPM](https://img.shields.io/badge/NPM-%23000000.svg?style=for-the-badge&logo=npm&logoColor=white)
   
 
